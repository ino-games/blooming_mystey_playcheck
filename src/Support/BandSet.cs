using System;
using System.Text.RegularExpressions;
using static Service.Logic.GameDefs;



namespace Service.Logic
{
    class BandSet
    {

        #region Bandsets

        Int32[][] LosingBandSet = new Int32[][]
        {
            new Int32[]
            {
                LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH3,
                LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH3,
                LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW4,
                LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH3
            },

            new Int32[]
            {
                LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH1,
                LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,
                LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH3,
                LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH4
            },

            new Int32[]
            {
                LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW3,
                LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_HIGH4,
                LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH1,
                LOGIC_SYMBOL_LOW4
            },

            new Int32[]
            {
                LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW5,
                LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW3,
                LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH2,
                LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW1,
                LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1
            },

            new Int32[]
            {
                LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH4,
                LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,
                LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH1,
                LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,
                LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH3
            }
        };


        Int32[][] NormalBandSet = new Int32[][]
        {
            new Int32[]
            {
                LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW2,
                LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW4,
                LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,
                LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW5,
                LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,
                LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH2,
                LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW4
            },

            new Int32[]
            {
                LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,
                LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW2,
                LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,
                LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW4,
                LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH4,
                LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH4,
                LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW3
            },

            new Int32[]
            {
                LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,
                LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH4,
                LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,
                LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,
                LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW1,
                LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW1,
                LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH3
            },

            new Int32[]
            {
                LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW3,
                LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW1,
                LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,
                LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW5,
                LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,
                LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH4,
                LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW4
            },

            new Int32[]
            {
                LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,
                LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH2,
                LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW4,
                LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH3,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW3,
                LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_HIGH2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,
                LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH2,
                LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_HIGH2
            }
        };


        Int32[][] JustLowSymbolBandSet = new Int32[][]
        {
            new Int32[]
            {
                LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW3,
                LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,
                LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2
            },

            new Int32[]
            {
                LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,
                LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,
                LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW3
            },

            new Int32[]
            {
                LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,
                LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,
                LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW1
            },

            new Int32[]
            {
                LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,
                LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW3,
                LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4
            },

            new Int32[]
            {
                LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,
                LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW1,LOGIC_SYMBOL_LOW2,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW1,
                LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW4,LOGIC_SYMBOL_LOW3,LOGIC_SYMBOL_LOW5,LOGIC_SYMBOL_LOW1
            }
        };

        #endregion


        public Int32 GetBandSetReelLength(Int32 bandsetIndex, Int32 reelIndex)
        {
            Int32 len = 0;

            switch (bandsetIndex)
            {
                case LOGIC_BANDSET_LOSING: len = LosingBandSet[reelIndex].Length; break;
                case LOGIC_BANDSET_NORMAL: len = NormalBandSet[reelIndex].Length; break;
                case LOGIC_BANDSET_JUST_LOW: len = JustLowSymbolBandSet[reelIndex].Length; break;
            }

            return len;
        }

        // *******************************************************************************
        public Int32 GetSymbol(Int32 bandsetIndex, Int32 reelIndex, Int32 y)
        {
            Int32 symbol = 0;
            Int32 pos = 0;
            Int32 reelLength = GetBandSetReelLength(bandsetIndex, reelIndex);

            if (y < reelLength)
                pos = y;
            else
                pos = y % reelLength;

            switch (bandsetIndex)
            {
                case LOGIC_BANDSET_LOSING: symbol = LosingBandSet[reelIndex][pos]; break;
                case LOGIC_BANDSET_NORMAL: symbol = NormalBandSet[reelIndex][pos]; break;
                case LOGIC_BANDSET_JUST_LOW: symbol = JustLowSymbolBandSet[reelIndex][pos]; break;
            }

            return symbol;
        }

    }
}
